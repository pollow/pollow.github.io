<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>pollow's blog</title><link href="http://pollow.github.io/" rel="alternate"></link><link href="http://pollow.github.io/feeds/misc.atom.xml" rel="self"></link><id>http://pollow.github.io/</id><updated>2016-01-23T23:21:36+08:00</updated><entry><title>Java Web 的测试</title><link href="http://pollow.github.io/java-web-de-ce-shi.html" rel="alternate"></link><updated>2016-01-23T23:21:36+08:00</updated><author><name>XING Chang</name></author><id>tag:pollow.github.io,2016-01-23:java-web-de-ce-shi.html</id><summary type="html">&lt;p&gt;前几天研究了 Java Web 中如何利用 log4j 记录 log，方便追踪少见的错误和异常，更加优雅的拜托 stdout 来 debug。这几天主要要钻研一下如何在一个 Java Web 的大型系统中优雅的做测试，包括单元测试和集成测试。&lt;/p&gt;
&lt;p&gt;由于工程庞大，错综复杂，而且目前一直处于在线调试的状态，缺少各种基础设施，所以加入测试难度颇高，今天简单的搜索了一下，检索到了一些关键技术和工具，暂作记录，空下来后慢慢研究。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;JUnit 4 -- StrutsSpringJUnit4TestCase&lt;/li&gt;
&lt;li&gt;&lt;a href="http://watij.com/"&gt;Watji&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;h2 in-memory database&lt;/li&gt;
&lt;li&gt;Mock Class&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;感觉想要成功的为整套系统加入测试，对于很多 Java 的概念和框架还需要深入学习，目前看来，遇到 IoR 和 Bean 相关的概念时还是有些不明所以。&lt;/p&gt;
&lt;p&gt;想要进行单元测试，有几个问题需要解决&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如何模拟 Request 请求&lt;/li&gt;
&lt;li&gt;如何判断请求处理是否正常&lt;/li&gt;
&lt;li&gt;如何劫持 Hibernate 的数据库操作&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;关于第一三两个问题，StackOverflow 上很多答案都提到了 Mock Class 的概念，似乎是利用了 IoR 区分了开发和部署环境下 Hibernate 的行为。为了更好的理解这些用法，还需要对 Spring Core 进行深入的研究。&lt;/p&gt;
&lt;p&gt;说白了 SSH 经典框架我现在就研究了 Struts2，还总被坑奇怪的地方坑。&lt;/p&gt;
&lt;p&gt;Watji 是一个通过模拟浏览器行为，加入断言库来进行测试的框架，优点在于可以测试页面在浏览器中的行为，可能还可以处理 JavaScript 页面的展示问题。问题在于，现在的系统大量使用了 iframe 的嵌套，但是我在 API 中没有看到对于 iframe 如何进行分析。&lt;/p&gt;
&lt;p&gt;其次还需要把整个工程的几个G代码全都拿来梳理/整理一遍，重新设计工程结构，方便本地开发、调试、测试和发布，这么看来，还应该学习一下 Gradle 的用法。&lt;/p&gt;
&lt;p&gt;简单的记录了一下这几天的学习，都是一些技术性上的问题，但是在处理 legacy code 的问题上，还需要学习一些哲学上和概念上的思路。买了本《重构》已经在路上了，任重而道远。&lt;/p&gt;
&lt;p&gt;总之，Java 最擅长创造名词……&lt;/p&gt;</summary></entry><entry><title>Log4j 学习与配置</title><link href="http://pollow.github.io/log4j-xue-xi-yu-pei-zhi.html" rel="alternate"></link><updated>2016-01-22T22:30:32+08:00</updated><author><name>XING Chang</name></author><id>tag:pollow.github.io,2016-01-22:log4j-xue-xi-yu-pei-zhi.html</id><summary type="html">&lt;p&gt;开始的时候就被这个项目居然使用 System.out.println 调试大法震惊了一下，由于我也懒得在架构上动手脚，所以也就随大流将就一下。但是最近遇到几个问题，一是我写的一个方法逻辑太过复杂，有太多的数据库操作（其实应该避免，但是因为API不够丰富，逻辑又十分复杂暂时只能如此了）；二是有一些客户报告了一下我在本地无法复现，有很偶然才会发生的 bug，不得已，我决定使用一下 Logger，在相关的函数中记录一下关键值。&lt;/p&gt;
&lt;h2&gt;基础使用&lt;/h2&gt;
&lt;p&gt;记录需要使用 Logger, Logger 应该是单例模型，在应用初始化的时候创建并且保留以后一直使用；不过 LogManager 会处理这些事情，只要提供合适的 Logger 名称，它会在内部管理所有的 Logger。Logger的名字推荐和使用的类名一致，这也是&lt;code&gt;LogManager.getLogger()&lt;/code&gt;的默认行为。&lt;/p&gt;
&lt;p&gt;常用的又 INFO, DEBUG, WARN, ERROR 四个等级，对应四个函数；可以使用 printf 函数默认调用 String Formatter；有 entry, exit 两个函数处理 Flow Tracing。（如果每个函数都要在进入和退出的时候调用这两个函数，是不是可以使用装饰器方法操作？）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Logging in user {} with birthday {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getName&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getBirthdayCalendar&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;API 2.x 中表示可以直接调用函数，不需要检查 log 等级是否开启，不知道 API 1.x 中是否可以这样使用。&lt;/p&gt;
&lt;p&gt;如果是 Java 8，可以借助 Lambda 表达式完成 lazy-evaluation.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;trace&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Some long-running operation returned {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;expensiveOperation&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;高级用法暂时不提。&lt;/p&gt;
&lt;h2&gt;Configuration&lt;/h2&gt;
&lt;p&gt;感觉 log4j 的配置十分复杂，和各种框架也有耦合（主要是框架使用了 log4j 作为日志输出）。&lt;/p&gt;
&lt;p&gt;Log4j 推荐的配置方法是通过配置文件进行配置，如果无法定位到配置文件的话，则会使用默认配置 DefaultConfiguration class. 默认输出到控制台，只显示 ERROR 级别。&lt;/p&gt;
&lt;p&gt;Log4j 支持多种配置格式和文件名，具体可以参考 &lt;a href="http://logging.apache.org/log4j/2.x/manual/configuration.html"&gt;Configuration&lt;/a&gt;。通常来说，在工程的配置目录中添加 &lt;code&gt;log4j2.properties&lt;/code&gt; 文件最为合适。&lt;/p&gt;
&lt;p&gt;一个 XML 设置的结构通常如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&lt;/span&gt;;
&lt;span class="nt"&gt;&amp;lt;Configuration&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;Properties&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;Property&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;name1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;value&lt;span class="nt"&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;Property&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;name2&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;value2&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/Properties&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;filter&lt;/span&gt;  &lt;span class="err"&gt;...&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;Appenders&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;appender&lt;/span&gt; &lt;span class="err"&gt;...&lt;/span&gt; &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;filter&lt;/span&gt;  &lt;span class="err"&gt;...&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/appender&amp;gt;&lt;/span&gt;
    ...
  &lt;span class="nt"&gt;&amp;lt;/Appenders&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;Loggers&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;Logger&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;name1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;filter&lt;/span&gt;  &lt;span class="err"&gt;...&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/Logger&amp;gt;&lt;/span&gt;
    ...
    &lt;span class="nt"&gt;&amp;lt;Root&lt;/span&gt; &lt;span class="na"&gt;level=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;level&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;AppenderRef&lt;/span&gt; &lt;span class="na"&gt;ref=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/Root&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/Loggers&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/Configuration&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;\&amp;lt;Configuration&gt; 可以包含 status 属性，配置 log4j 内部的 log 级别，遇到问题是可以设置为 trace 来排查。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;最关键的是&lt;/strong&gt;要将 log 写入文件中，需要设置 Appender 的类型。我声明 Appender&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;Appender&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;File&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;运行时会出现 CLASS_NOT_FOUND 的异常。简单查询了一下，和 ClassLoader 有关，暂时没有研究；设置 Appender为&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;File&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;File&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;fileName=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;${filename}&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;PatternLayout&lt;/span&gt; &lt;span class="na"&gt;pattern=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/File&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;成功将 log 写入文件中。&lt;/p&gt;
&lt;h2&gt;RollingFile&lt;/h2&gt;
&lt;p&gt;详细而复杂的 Appender 配置可以参考 &lt;a href="http://logging.apache.org/log4j/2.x/manual/appenders.html#RollingFileAppender"&gt;Appenders&lt;/a&gt;。这里简单记录一下如何配置 RollingFile，既设置条件自动归档旧记录的方法。&lt;/p&gt;
&lt;p&gt;配置&lt;code&gt;RollingFileAppender&lt;/code&gt;需要设置&lt;code&gt;TriggeringPolicy&lt;/code&gt;和&lt;code&gt;RolloverStrategy&lt;/code&gt;两个属性，分别用来判断何时归档以及归档名称。&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;Policies&lt;/code&gt;标签设置&lt;code&gt;CompositeTriggeringPolicy&lt;/code&gt;属性，内部可以包含多个&lt;code&gt;Policies&lt;/code&gt;，任意一个为真都会产生新文件并归档旧文件。&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;DefaultRolloverStrategy&lt;/code&gt;配置命名策略，使用滑动窗口侧策略，有四个参数可以配置：fileIndex, min, max, compressionLevel。fileIndex可以设置为&lt;code&gt;min&lt;/code&gt;或者&lt;code&gt;max&lt;/code&gt;，表示新归档的日志的明明方向（最大 or 最小），max 为窗口大小，超过 max 后会自动删除最老的归档。同时，默认策略在&lt;code&gt;filePattern&lt;/code&gt;中同时接受时间和序号两个参数。一下是官网提供的一个样例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;Configuration&lt;/span&gt; &lt;span class="na"&gt;status=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;warn&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;MyApp&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;packages=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;Appenders&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;RollingFile&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;RollingFile&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;fileName=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;logs/app.log&amp;quot;&lt;/span&gt;
                 &lt;span class="na"&gt;filePattern=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;logs/$${date:yyyy-MM}/app-%d{MM-dd-yyyy}-%i.log.gz&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;PatternLayout&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;Pattern&amp;gt;&lt;/span&gt;%d %p %c{1.} [%t] %m%n&lt;span class="nt"&gt;&amp;lt;/Pattern&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/PatternLayout&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;Policies&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;TimeBasedTriggeringPolicy&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;SizeBasedTriggeringPolicy&lt;/span&gt; &lt;span class="na"&gt;size=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;250 MB&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/Policies&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/RollingFile&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/Appenders&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;Loggers&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;Root&lt;/span&gt; &lt;span class="na"&gt;level=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;error&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;AppenderRef&lt;/span&gt; &lt;span class="na"&gt;ref=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;RollingFile&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/Root&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/Loggers&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/Configuration&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以看出&lt;code&gt;%i&lt;/code&gt;和&lt;code&gt;%d&lt;/code&gt;分别代表了序号和时间，时间格式和Java常用的配置相同。这个配置默认会产生最多七个归档，但是代码中并没有7这个数字出现，猜测为默认配置。同时还会调用&lt;code&gt;gzip&lt;/code&gt;压缩，猜测是通过文件后缀名判断的压缩算法……&lt;/p&gt;
&lt;p&gt;以上介绍了简单的 RollingFile 配制方法，已经足够简单实用，更加复杂的需求请参考&lt;a href="http://logging.apache.org/log4j/2.x/manual/appenders.html#RollingFileAppender"&gt;官档&lt;/a&gt;。&lt;/p&gt;
&lt;h2&gt;Logger&lt;/h2&gt;
&lt;p&gt;在&lt;code&gt;Loggers&lt;/code&gt;标签中可以指定多个&lt;code&gt;Logger&lt;/code&gt;记录器。其中&lt;code&gt;Root&lt;/code&gt;标签必须存在（在 Properties 文件中，使用&lt;code&gt;rootLogger&lt;/code&gt;），作为根记录器，匹配所有的 log 行为。其他的&lt;code&gt;Logger&lt;/code&gt;标签可以通过&lt;code&gt;name&lt;/code&gt;属性指定匹配的&lt;code&gt;Logger&lt;/code&gt;名称，也就是&lt;code&gt;LogManager.getLogger(name)&lt;/code&gt;中传入的名称，默认为类名。&lt;/p&gt;
&lt;p&gt;日志打印行为会匹配所有匹配的&lt;code&gt;Logger&lt;/code&gt;标签，如果希望匹配后截断，可以指定&lt;code&gt;additivity&lt;/code&gt;属性为false。&lt;/p&gt;
&lt;p&gt;一个样例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;Configuration&lt;/span&gt; &lt;span class="na"&gt;status=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;INFO&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;Properties&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;Property&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;filename&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;target/test.log&lt;span class="nt"&gt;&amp;lt;/Property&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/Properties&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;Appenders&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;Console&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Console&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;PatternLayout&lt;/span&gt; &lt;span class="na"&gt;pattern=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;/Console&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/Appenders&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;Loggers&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;Root&lt;/span&gt; &lt;span class="na"&gt;level=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;trace&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;AppenderRef&lt;/span&gt; &lt;span class="na"&gt;ref=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Console&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/Root&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;Logger&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;com.trendcom.tour.A&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;level=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;trace&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;AppenderRef&lt;/span&gt; &lt;span class="na"&gt;ref=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Console&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/Logger&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;Logger&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;com.trendcom.tour&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;level=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;trace&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;additivity=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;false&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;AppenderRef&lt;/span&gt; &lt;span class="na"&gt;ref=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Console&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/Logger&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/Loggers&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/Configuration&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Log4j 1.x &amp;amp; 2.x&lt;/h2&gt;
&lt;p&gt;具体介绍请看 &lt;a href="http://logging.apache.org/log4j/2.x/manual/index.html"&gt;Introduction&lt;/a&gt;，我浏览了一下系统依赖库，发现已经存在 Log4j 1.x，并且在根目录中也有 log4j.property。为了绕过系统级的迁移问题，如果不能并存，最好暂时使用 1.x。&lt;/p&gt;</summary></entry><entry><title>[Memo][Env] Android 学习日记 Day 1</title><link href="http://pollow.github.io/memoenv-android-xue-xi-ri-ji-day-1.html" rel="alternate"></link><updated>2016-01-14T00:26:11+08:00</updated><author><name>XING Chang</name></author><id>tag:pollow.github.io,2016-01-14:memoenv-android-xue-xi-ri-ji-day-1.html</id><summary type="html">&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;人生不如意，事十常八九。最嫌弃 Java 的我正在维护一套 legacy 的 Java Web 系统，还在为了帮人做论文而学习 Android 开发。&lt;/p&gt;
&lt;p&gt;这种大型工具链最难学，知识细节十分琐碎，而且主要集中在工具的使用和针对性框架知识的积累，主要靠背。而且环境搭建更是难中之难……&lt;/p&gt;
&lt;p&gt;把学习中的一些知识点记录积累一下，方便复习吧。&lt;/p&gt;
&lt;h2&gt;学习资料&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://developer.android.com/develop/index.html"&gt;Develop Apps&lt;/a&gt;
&lt;a href="http://www.amazon.cn/%E7%AC%AC%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81-Android-%E9%83%AD%E9%9C%96/dp/B00LVHTI9U/ref=pd_bxgy_14_img_2?ie=UTF8&amp;amp;refRID=0G5C7P8T3HFKK0APVNV5"&gt;《第一行代码-Android》&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;环境配置&lt;/h2&gt;
&lt;p&gt;今天赶巧家里网不稳定，下载东西断断续续，花了一上午才把环境搭建起来。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;下载&amp;amp;安装 Android Studio，推荐使用最新稳定版。&lt;/li&gt;
&lt;li&gt;OS X 需要单独下载 SDK Tools，放到指定目录。&lt;/li&gt;
&lt;li&gt;随便建个工程，进入 AS 后打开 SDK Manager，下载如下项目：&lt;ol&gt;
&lt;li&gt;Android SDK Tools&lt;/li&gt;
&lt;li&gt;Android SDK Platform-tools&lt;/li&gt;
&lt;li&gt;Android SDK Build-tools&lt;/li&gt;
&lt;li&gt;SDK Platform&lt;/li&gt;
&lt;li&gt;ARM EABI v7a System Image&lt;/li&gt;
&lt;li&gt;Intel x86 Atom 64 System Image&lt;/li&gt;
&lt;li&gt;Sources for Android SDK&lt;/li&gt;
&lt;li&gt;Android Support Repo&lt;/li&gt;
&lt;li&gt;Android Support Lib&lt;/li&gt;
&lt;li&gt;Intel x86 Emulator Accelerator (HAXM Installer)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;在 SDK Manager 的 Settings 中可以设置国内源&lt;a href="www.androiddevtools.cn"&gt;AndroidDevTools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在 AS 中的 System Settings 中也可以设置代理，可以将本地的shadowsocks配置上去。&lt;/li&gt;
&lt;li&gt;打开 AVD Manager，安装 HAXM&lt;/li&gt;
&lt;li&gt;新建 Emulator，推荐使用x86镜像，据说速度快一些，有兼容性问题时再使用ARM版。&lt;/li&gt;
&lt;li&gt;编译运行Hello World。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;第一天配置环境，感觉还有很多疑问没有解决，比如每个 Android 版本都有可用的 SDK ，是只需要安装最新的，还是所有要兼容的目标版本都需要呢？SDK 那里有很多项目都是每个 Android 版本都有一个，官网推荐下载最新的，那么如果需要开发针对低版本的 app，需不需要低版本的 SDK Tools 呢？编译的时候发生了些什么，这个 Gradle 构建的流程是什么？这么多的资源文件如何组织起来的？&lt;/p&gt;
&lt;p&gt;希望进一步的学习可以解决这些疑问。&lt;/p&gt;</summary><category term="memo"></category><category term="env"></category><category term="android"></category></entry><entry><title>[Brief Note] Git rebase 小结</title><link href="http://pollow.github.io/brief-note-git-rebase-xiao-jie.html" rel="alternate"></link><updated>2016-01-11T23:26:51+08:00</updated><author><name>XING Chang</name></author><id>tag:pollow.github.io,2016-01-11:brief-note-git-rebase-xiao-jie.html</id><summary type="html">&lt;h2&gt;Githug&lt;/h2&gt;
&lt;p&gt;前几天再 Timeline 上看到有人推荐了一款叫做 Githug 的小游戏，通过解决任务学习 Git 的操作使用。由于感觉自己对于 Git 的使用一直停留在比较初级的阶段，有比较多的知识盲点，所以决定下载下来玩一玩，顺便把&lt;a href=""&gt;题解&lt;/a&gt;和学习笔记分别记录一下。&lt;/p&gt;
&lt;h2&gt;Pro Git&lt;/h2&gt;
&lt;p&gt;开始的内容比较简单也比较顺利，在 level 28 第一次遇到了问题——涉及到了rebase。这个功能虽然之前也有使用，但是对于概念一直有所困惑，正巧同时再 Startup News 上看到&lt;a href="http://git-scm.com/book/zh"&gt;《Pro Git 2ed》中文版&lt;/a&gt;翻译校对完成，就顺手上去看了一下有关章节，在这里简略记录一些内容。&lt;/p&gt;
&lt;h2&gt;rebase&lt;/h2&gt;
&lt;p&gt;推荐阅读：&lt;a href="http://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%8F%98%E5%9F%BA"&gt;3.6 Git 分支 - 变基&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Git 的分支合并有 &lt;code&gt;merge&lt;/code&gt; 和 &lt;code&gt;rebase&lt;/code&gt; 两种操作。区别在于 merge 只简单的完成代码合并，而 rebase 则是提取两个不同分支（源分支与目标分支）的公共祖先作为基底，生成源分支的 patch 再应用到目标分支上，同时清理冗余的提交。&lt;/p&gt;
&lt;p&gt;概念其实比较简单，只要注意应用到合适的场合，也就是清理冗余提交信息时，就比较合适，原文讲解的十分清晰。&lt;/p&gt;
&lt;p&gt;有一点要注意的是，rebase 操作应当&lt;strong&gt;仅应用到本地仓库的提交记录整理&lt;/strong&gt;上，如果 rebase 了远程的提交和分支，则会导致所有参与开发的人得分支依赖变得一片混乱，&lt;strong&gt;『人民群众会仇恨你，你的朋友和家人也会嘲笑你，唾弃你』。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当然也有解决方案，当公共仓库的提交已经发生 rebase，也就是说本地分支依赖的提交可能已经被删除的时候，不要直接 &lt;code&gt;git pull&lt;/code&gt;，而是取到本地后执行 rebase 操作，或者直接：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git pull --rebase
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Git 的操作规范推荐每次&lt;code&gt;git fetch&lt;/code&gt;下来以后视情况决定 merge 和 pull 操作，而我实际上习惯每次直接执行&lt;code&gt;git pull&lt;/code&gt;操作。对于这种情况，有一个全局设定可以将&lt;code&gt;git pull&lt;/code&gt;操作默认执行&lt;code&gt;--rebase&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git config --global pull.rebase true
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;merge or rebase&lt;/h2&gt;
&lt;p&gt;今天还在阮一峰的博客上看到了&lt;a href="http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html"&gt;《Commit message 和 Change log 编写指南》&lt;/a&gt;这篇文章，介绍了 commit 信息的编写规范，和利用 commit 信息直接生成 Change log 的技术和相应地工具。个人认为这种规范的制定十分合理，在大型系统维护时，追溯版本管理记录是检阅 bug 的最佳方式，而清晰明了富有意义的提交信息无疑提供了更丰富的线索。&lt;/p&gt;
&lt;p&gt;但是本地分支开发时，通常要频繁的进行提交，确保工作记录可以追溯，方便测试和调试，产生的提交记录往往十分散乱并且意义不明，在开发时这些提交有积极地意义，但却是后期的维护时沉重的负担。所以我个人倾向于在分支合并时进行 rebase 操作，时提交信息简单易读又清晰明了。&lt;/p&gt;
&lt;h2&gt;Solution for level 28&lt;/h2&gt;
&lt;p&gt;Githug level 28 的任务提示如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Your local master branch has diverged from the remote origin/master branch. Rebase your commit onto origin/master and push it to remote.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这就是最不应该发生的 &lt;strong&gt;rebase 了公共仓库提交&lt;/strong&gt;的情况，按照前文所述的&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git pull --rebase
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;拉取数据，之后直接&lt;code&gt;git push&lt;/code&gt;即可。&lt;/p&gt;</summary><category term="brief"></category><category term="git"></category></entry><entry><title>Hello World</title><link href="http://pollow.github.io/hello-world.html" rel="alternate"></link><updated>2016-01-10T23:28:23+08:00</updated><author><name>XING Chang</name></author><id>tag:pollow.github.io,2016-01-10:hello-world.html</id><summary type="html">&lt;h2&gt;Hello World&lt;/h2&gt;
&lt;p&gt;三年来第三次开通Blog，Wordpress 也配置过了，自己的博客系统也写过了，自己的静态博客引擎也写过了，然并卵，折腾的时间不少，文章才只写了三四篇。&lt;/p&gt;
&lt;p&gt;简简单单最好了，这次试用一下 Pelican + Github.IO，不要在乎形式，希望可以坚持写下去，记录一下自己的学习历程吧。&lt;/p&gt;
&lt;p&gt;Hello World, AGAIN.&lt;/p&gt;</summary></entry></feed>